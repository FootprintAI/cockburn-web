/**
 * Grandturk/cockburn API Documentations
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CockburnAppLoginRequest } from '../model/cockburnAppLoginRequest';
import { CockburnAppLoginResponse } from '../model/cockburnAppLoginResponse';
import { CockburnCreateTranscribeRequest } from '../model/cockburnCreateTranscribeRequest';
import { CockburnCreateTranscribeResponse } from '../model/cockburnCreateTranscribeResponse';
import { CockburnCreateUserRequest } from '../model/cockburnCreateUserRequest';
import { CockburnCreateUserResponse } from '../model/cockburnCreateUserResponse';
import { CockburnGetTranscribeResponse } from '../model/cockburnGetTranscribeResponse';
import { CockburnGetUserResponse } from '../model/cockburnGetUserResponse';
import { CockburnKeepTranscribeResponse } from '../model/cockburnKeepTranscribeResponse';
import { CockburnListTranscribeResponse } from '../model/cockburnListTranscribeResponse';
import { CockburnServiceKeepTranscribeRequest } from '../model/cockburnServiceKeepTranscribeRequest';
import { CockburnServiceUploadFileRequest } from '../model/cockburnServiceUploadFileRequest';
import { CockburnUploadFileResponse } from '../model/cockburnUploadFileResponse';
import { CommonErrorResponse } from '../model/commonErrorResponse';
import { RpcStatus } from '../model/rpcStatus';
import { StreamResultOfCockburnGetTranscribeStreamingResponse } from '../model/streamResultOfCockburnGetTranscribeStreamingResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class CockburnServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceAppLogin(body: CockburnAppLoginRequest, ): Observable<AxiosResponse<CockburnAppLoginResponse>>;
    public cockburnServiceAppLogin(body: CockburnAppLoginRequest, ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cockburnServiceAppLogin.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CockburnAppLoginResponse>(`${this.basePath}/v1/login`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param transcriptionId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceCancelTranscribe(transcriptionId: string, projectId?: string, ): Observable<AxiosResponse<object>>;
    public cockburnServiceCancelTranscribe(transcriptionId: string, projectId?: string, ): Observable<any> {
        if (transcriptionId === null || transcriptionId === undefined) {
            throw new Error('Required parameter transcriptionId was null or undefined when calling cockburnServiceCancelTranscribe.');
        }

        let queryParameters = new URLSearchParams();
        if (projectId !== undefined && projectId !== null) {
            queryParameters.append('projectId', <any>projectId);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<object>(`${this.basePath}/v1/transcription/${encodeURIComponent(String(transcriptionId))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceCreateTranscribe(body: CockburnCreateTranscribeRequest, ): Observable<AxiosResponse<CockburnCreateTranscribeResponse>>;
    public cockburnServiceCreateTranscribe(body: CockburnCreateTranscribeRequest, ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cockburnServiceCreateTranscribe.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CockburnCreateTranscribeResponse>(`${this.basePath}/v1/transcription`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceCreateUser(body: CockburnCreateUserRequest, ): Observable<AxiosResponse<CockburnCreateUserResponse>>;
    public cockburnServiceCreateUser(body: CockburnCreateUserRequest, ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cockburnServiceCreateUser.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CockburnCreateUserResponse>(`${this.basePath}/v1/user`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param transcriptionId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceGetTranscribe(transcriptionId: string, projectId?: string, ): Observable<AxiosResponse<CockburnGetTranscribeResponse>>;
    public cockburnServiceGetTranscribe(transcriptionId: string, projectId?: string, ): Observable<any> {
        if (transcriptionId === null || transcriptionId === undefined) {
            throw new Error('Required parameter transcriptionId was null or undefined when calling cockburnServiceGetTranscribe.');
        }

        let queryParameters = new URLSearchParams();
        if (projectId !== undefined && projectId !== null) {
            queryParameters.append('projectId', <any>projectId);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CockburnGetTranscribeResponse>(`${this.basePath}/v1/transcription/${encodeURIComponent(String(transcriptionId))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param transcriptionId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceGetTranscribeStreaming(transcriptionId: string, projectId?: string, ): Observable<AxiosResponse<StreamResultOfCockburnGetTranscribeStreamingResponse>>;
    public cockburnServiceGetTranscribeStreaming(transcriptionId: string, projectId?: string, ): Observable<any> {
        if (transcriptionId === null || transcriptionId === undefined) {
            throw new Error('Required parameter transcriptionId was null or undefined when calling cockburnServiceGetTranscribeStreaming.');
        }

        let queryParameters = new URLSearchParams();
        if (projectId !== undefined && projectId !== null) {
            queryParameters.append('projectId', <any>projectId);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<StreamResultOfCockburnGetTranscribeStreamingResponse>(`${this.basePath}/v1/transcription/${encodeURIComponent(String(transcriptionId))}:stream`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceGetUser(userId: string, ): Observable<AxiosResponse<CockburnGetUserResponse>>;
    public cockburnServiceGetUser(userId: string, ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cockburnServiceGetUser.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CockburnGetUserResponse>(`${this.basePath}/v1/user/${encodeURIComponent(String(userId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param transcriptionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceKeepTranscribe(transcriptionId: string, body: CockburnServiceKeepTranscribeRequest, ): Observable<AxiosResponse<CockburnKeepTranscribeResponse>>;
    public cockburnServiceKeepTranscribe(transcriptionId: string, body: CockburnServiceKeepTranscribeRequest, ): Observable<any> {
        if (transcriptionId === null || transcriptionId === undefined) {
            throw new Error('Required parameter transcriptionId was null or undefined when calling cockburnServiceKeepTranscribe.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cockburnServiceKeepTranscribe.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CockburnKeepTranscribeResponse>(`${this.basePath}/v1/transcription/${encodeURIComponent(String(transcriptionId))}:keep`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceListTranscribe(projectId: string, ): Observable<AxiosResponse<CockburnListTranscribeResponse>>;
    public cockburnServiceListTranscribe(projectId: string, ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling cockburnServiceListTranscribe.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CockburnListTranscribeResponse>(`${this.basePath}/v1/projects/${encodeURIComponent(String(projectId))}/transcription`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {    option (google.api.http) &#x3D; {        post: \&quot;/v1/projects\&quot;        body: \&quot;*\&quot;    }; } rpc PutProject(PutProjectRequest) returns (PutProjectResponse) {    option (google.api.http) &#x3D; {        put: \&quot;/v1/projects/{project_id}\&quot;        body: \&quot;*\&quot;    }; } rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {    option (google.api.http) &#x3D; {        get: \&quot;/v1/projects\&quot;    }; } rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {    option (google.api.http) &#x3D; {        get: \&quot;/v1/projects/{project_id}\&quot;    }; }
     * 
     * @param projectId given when a project has been created
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cockburnServiceUploadFile(projectId: string, body: CockburnServiceUploadFileRequest, ): Observable<AxiosResponse<CockburnUploadFileResponse>>;
    public cockburnServiceUploadFile(projectId: string, body: CockburnServiceUploadFileRequest, ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling cockburnServiceUploadFile.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cockburnServiceUploadFile.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-Key"]) {
            headers['X-API-Key'] = this.configuration.apiKeys["X-API-Key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CockburnUploadFileResponse>(`${this.basePath}/v1/projects/${encodeURIComponent(String(projectId))}/uploadfile`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
